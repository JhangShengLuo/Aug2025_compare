-- benchmark_queries.sql
-- Use EXPLAIN ANALYZE before each query to get detailed performance metrics.

-- Set a variable for a specific order_id to test point lookups.
-- You will need to fetch a valid UUID from your table first.
-- Example: \set lookup_uuid '''...your-uuid-here...'''





-- Query 1: Point Lookup
-- fetch a single record for order_id to replace the :lookup_uuid
SELECT order_id FROM orders_row LIMIT 1;
SELECT order_id FROM orders_columnar LIMIT 1;
-- Fetches a single record by its primary key.
-- Expected: Faster on PostgreSQL (row-store) due to its B-tree index.
EXPLAIN ANALYZE SELECT * FROM orders_row WHERE order_id = :lookup_uuid;
EXPLAIN ANALYZE SELECT * FROM orders_columnar WHERE order_id = :lookup_uuid;


-- Query 2: Aggregation
-- Calculates the total sales amount for each region.
-- Expected: Faster on Hydra (columnar) because it only needs to read the 'region' and 'price' columns.
EXPLAIN ANALYZE SELECT region, SUM(price * quantity) AS total_sales FROM orders_row GROUP BY region;
EXPLAIN ANALYZE SELECT region, SUM(price * quantity) AS total_sales FROM orders_columnar GROUP BY region;


-- Query 3: Filtering on a Range
-- Selects all orders within a specific one-month date range.
-- Expected: Faster on Hydra, as it can efficiently scan the 'order_date' column.
EXPLAIN ANALYZE SELECT COUNT(*) FROM orders_row WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31';
EXPLAIN ANALYZE SELECT COUNT(*) FROM orders_columnar WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31';


-- Query 4: Analytical Query (Heavy Aggregation)
-- Finds customers who have placed more than 10 orders and counts them.
-- Expected: Significantly faster on Hydra. This is a classic analytical query that benefits greatly from columnar storage.
EXPLAIN ANALYZE
SELECT customer_id, COUNT(order_id) AS order_count
FROM orders_row
GROUP BY customer_id
HAVING COUNT(order_id) > 10;

EXPLAIN ANALYZE
SELECT customer_id, COUNT(order_id) AS order_count
FROM orders_columnar
GROUP BY customer_id
HAVING COUNT(order_id) > 10;


-- Query 5: Full Scan Aggregation
-- Calculates the average price of all products sold.
-- Expected: Faster on Hydra because it only reads the 'price' column, avoiding I/O on other columns.
EXPLAIN ANALYZE SELECT AVG(price) FROM orders_row;
EXPLAIN ANALYZE SELECT AVG(price) FROM orders_columnar;

